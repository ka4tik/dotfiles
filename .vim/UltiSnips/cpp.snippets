snippet point "point libary" !b
const double PI = acos(-1.0);
const double EPS = 1E-8;

bool zero(double x)
{
	return -EPS < x && x < EPS;
}

int sgn(double x)
{
	return x > EPS ? 1 : (x < -EPS ? -1 : 0);
}

class Point
{
	public:
	double x, y;
	Point() {}
	Point(double x, double y) : x(x), y(y) {}
	void init()
	{
		scanf("%lf%lf", &x, &y);
	}
	void print() const
	{
		printf("Point(%lf %lf)\n", x, y);
	}
	bool operator < (const Point & rhs) const
	{
		return x < rhs.x - EPS || (zero(x - rhs.x) && y < rhs.y - EPS);
		}
	bool operator == (const Point & rhs) const
	{
		return zero(x - rhs.x) && zero(y - rhs.y);
		}
	Point operator - (const Point & rhs) const
	{
		return Point(x - rhs.x, y - rhs.y);
		}
	Point operator + (const Point & rhs) const
	{
		return Point(x + rhs.x, y + rhs.y);
		}
	Point operator * (const double scale) const
	{
		return Point(x * scale, y * scale);
		}
	Point operator / (const double scale) const
	{
		return Point(x / scale, y / scale);
		}
	double operator * (const Point & rhs) const
	{
		return x * rhs.y - rhs.x * y;
		}
	double operator ^ (const Point & rhs) const
	{
		return x * rhs.x + y * rhs.y;
		}
	Point rotate(double angle) const
	{
		Point p(sin(angle), cos(angle));
		return Point((*this) * p, (*this) ^ p);
	}
	double length2() const
	{
		return x * x + y * y;
	}
	double length() const
	{
		return sqrt(this->length2());
		}
	Point trunc(const double scale) const
	{
		return (*this) / this->length() * scale;
		}
	double angle() const
	{
		return atan2(y, x);
		}
	Point perpendicular() const
	{
		return Point(-y, x);
		}
};

class Line
{
	public:
		Point l1, l2;
		Line() {}
		Line(Point l1, Point l2) : l1(l1), l2(l2) {}
		void init()
		{
			l1.init();
			l2.init();
		}
		void print() const
		{
			printf("Line[(%lf %lf)--(%lf %lf)]\n", l1.x, l1.y, l2.x, l2.y);
			}
		bool cross(const Point & p) const
		{
			return zero((p - l2) * (l1 - l2));
		}
		bool cross(const Line &rhs) const
		{
			return !this->parallel(rhs);
			}
		bool parallel(const Line &rhs) const
		{
			return zero((l1 - l2) * (rhs.l1 - rhs.l2));
		}
		Point intersection(const Line &rhs) const
		{
			return l1 + (l2 - l1) * (((l1 - rhs.l1) * (rhs.l1 - rhs.l2)) / ((l1 - l2) * (rhs.l1 - rhs.l2)));
		}
		Point projection(const Point &p) const
		{
			return this->intersection(Line(p, p + (l1 - l2).perpendicular()));
		}
		double distance(const Point &p) const
		{
			return ((p - l1) * (l2 - l1)) / (l1 - l2).length();
		}
		//For finding the perpendicular bisector of a line.
		Line perpendicular_bisector() const
		{
			Point p1=Point( (l1.x+l2.x)/2 , (l1.y+l2.y)/2);
			double m;
			Point p2;
			if( zero(l1.x-l2.x) )
			{
				m=0;
				p2=Point(p1.x+10, p1.y);
			}
			else{
				m=(l1.y-l2.y)/(l1.x-l2.x);
				if( zero(m) )
				{
					p2=Point(p1.x, p1.y+10);
				}
				else
				{
					m=-1/m;
					p2=Point(p1.x+10, p1.y+(10*m));
				}
			}
			return Line(p1, p2);
		}
};

//Finding the area of a polygon, all points must be in order.
double Area(vector<Point> &v)
{
	int n=v.size();

	double area=0;

	for(int i=1; i<n-1; i++)
	{
		Point p1=v[i]-v[0];
		Point p2=v[i+1]-v[0];
		//cout << p1*p2<< endl;
		area+= (p1*p2);
	}
	return abs(area/2);
}
endsnippet

snippet iii "iii" !b
#define iii pair< int,pair<int,int> >
endsnippet
snippet dj "Dijstras" !b
        multiset<ii> q;

        q.insert(ii(0,N));
        vector<int> d(N+2,INT_MAX);
        vector<int> visit(N+2,0);
        d[N]=0;

        while(q.size()>0)
        {
            ii c=*q.begin();
            q.erase(q.begin());
            if(c.second==N+1)
                break;
            if(visit[c.second]) continue;
            visit[c.second]=1;

            for(int i=0;i<N+2;i++)
            {
                if(visit[i]) continue;
                if(d[i]>c.first+dist(i,c.second))
                {
                    d[i]=c.first+dist(i,c.second);
                    q.insert(ii(d[i],i));
                }

            }

        }
endsnippet
snippet segtree "Segment Tre" !b
#define MAXN 111111
int tree[4*MAXN];
int lazy[4*MAXN];
vector<int> v;

void build(int node,int start,int end)
{
    if(start>end)
        return ;
    if(start==end)
    {
        tree[node]=v[start-1];
       return ; 
    }

    int mid=(start+end)>>1;
    build(2*node,start,mid);
    build(2*node+1,mid+1,end);

    tree[node]=tree[2*node]+tree[2*node+1];
}
void update(int node,int start,int end,int p,int q,int d)
{
    if(lazy[node]!=0)
    {
        tree[node]+=lazy[node];
        if(start!=end){
            lazy[2*node]+=(lazy[node]);
            lazy[2*node+1]+=lazy[node];
        }
        lazy[node]=0;
    }
    if(start>end||start>q||end<p)
        return ;
    if(start>=p&&q>=end)
    {
        tree[node]+=d;
        if(start!=end){
            lazy[2*node]+=(d);
            lazy[2*node+1]+=d;
        }
        return ;

    }

    int mid=(start+end)>>1;
    update(2*node,start,mid,p,q,d);
    update(2*node+1,mid+1,end,p,q,d);

    tree[node]=tree[2*node]+tree[2*node+1];
}
int query(int node,int start,int end,int p,int q)
{
    if(start>end||start>q||end<p)
        return 0;
    if(lazy[node]!=0)
    {
        tree[node]+=lazy[node];
        if(start!=end){
            lazy[2*node]+=(lazy[node]);
            lazy[2*node+1]+=lazy[node];
        }
        lazy[node]=0;
    }
    if(start>=p&&q>=end)
    {
        return tree[node];
    }
    int mid=(start+end)>>1;

    return query(2*node,start,mid,p,q)+
        query(2*node+1,mid+1,end,p,q);

}
endsnippet
snippet sieve "sieve" !b
    vector<int> primes;
    primes.push_back(2);
    for(int i=3;i<MAXN;i+=2)
    {
        if(!mark[i])
        {
            primes.push_back(i);
            for(int j=2*i;j<MAXN;j+=i)
            {
                mark[j]=1;
            }
        }
    }
endsnippet
snippet factorize "factorize" !b
vector<int> factorize(int x)
{
    vector<int> ret;
    for(int i=0;i<primes.size();i++)
    {
        while(x%primes[i]==0)
        {
            x/=primes[i];
            ret.push_back(primes[i]);
        }
    }
    return ret;
}
endsnippet
snippet tobinary "tobianary" !b
string tobinary(int x)
{
    string ret;
    while(x!=0)
    {
        ret=(char)(x%2+'0')+ret;
        x>>=1;
    }
    return ret;
}
endsnippet
snippet knightdir "knights direction arrays" !b
int dx[]={1,2,1,2,-1,-2,-1,-2};
int dy[]={2,1,-2,-1,2,1,-2,-1};
endsnippet
snippet bit "binary indexed tree" !b
int tree[MAXN];
void update(int index,int value)
{
	assert(index!=0);
	while(index<MAXN)
	{
		tree[index]+=value;
		index+=(index&-index);
	}
}
int sum(int index)
{
	int s=0;
	while(index>0)
	{
		s+=tree[index];
		index-=(index&-index);
	}
	return s;
}
endsnippet
snippet gentest "genernating testcases function" !b
void gentests()
{
    ofstream file;
    file.open("in");
    int n=10000;
    file<<n<<endl;
    while(n--)
    {
        file<<(rand()%10) + 1<<" " ;
    }
    file<<endl;
}
endsnippet
snippet dir2 "directions2 " !b
int dx2[]={1,-1,0,0,1,-1,1,-1};
int dy2[]={0,0,-1,1,-1,1,1,-1};
endsnippet
snippet dir "directions " !b
int dx[]={1,-1,0,0};
int dy[]={0,0,-1,1};
endsnippet
snippet toint "toint" !b
int toint(string str)
{
    istringstream is(str);
    int x;
    is>>x;
    return x;
}
endsnippet
snippet tostring "tostring function c++" !b
string tostring(int x)
{
    ostringstream os;
    os<<x;
    return os.str();
}
endsnippet
snippet ii "define pair" !b
#define ii pair<int,int>
endsnippet
snippet ll "define ll" !b
#define ll long long
endsnippet
snippet mod "define mod" !b
#define mod 1000000007
endsnippet
snippet maxn "define max" !b
#define MAXN 1111111
endsnippet
snippet modpow "modpow function" !b
long long modpow(long long n,long long p)
{
    long long ret=1;
    while(p)
    {
        if(p&1){
            ret=ret*n;
            if(ret>=mod) ret%=mod;
        }

        p=p/2;
        n*=n;
        if(n>=mod)
            n%=mod;
    }
    return ret;
}
endsnippet
snippet bigint "bigint libary" !b
const int base = 1000000000;
const int base_digits = 9;

struct bigint {
    vector<int> a;
    int sign;

    bigint() :
        sign(1) {
        }

    bigint(long long v) {
        *this = v;
    }

    bigint(const string &s) {
        read(s);
    }

    void operator=(const bigint &v) {
        sign = v.sign;
        a = v.a;
    }

    void operator=(long long v) {
        sign = 1;
        if (v < 0)
            sign = -1, v = -v;
        for (; v > 0; v = v / base)
            a.push_back(v % base);
    }

    bigint operator+(const bigint &v) const {
        if (sign == v.sign) {
            bigint res = v;

            for (int i = 0, carry = 0; i < (int) max(a.size(), v.a.size()) || carry; ++i) {
                if (i == (int) res.a.size())
                    res.a.push_back(0);
                res.a[i] += carry + (i < (int) a.size() ? a[i] : 0);
                carry = res.a[i] >= base;
                if (carry)
                    res.a[i] -= base;
            }
            return res;
        }
        return *this - (-v);
    }

    bigint operator-(const bigint &v) const {
        if (sign == v.sign) {
            if (abs() >= v.abs()) {
                bigint res = *this;
                for (int i = 0, carry = 0; i < (int) v.a.size() || carry; ++i) {
                    res.a[i] -= carry + (i < (int) v.a.size() ? v.a[i] : 0);
                    carry = res.a[i] < 0;
                    if (carry)
                        res.a[i] += base;
                }
                res.trim();
                return res;
            }
            return -(v - *this);
        }
        return *this + (-v);
    }

    void operator*=(int v) {
        if (v < 0)
            sign = -sign, v = -v;
        for (int i = 0, carry = 0; i < (int) a.size() || carry; ++i) {
            if (i == (int) a.size())
                a.push_back(0);
            long long cur = a[i] * (long long) v + carry;
            carry = (int) (cur / base);
            a[i] = (int) (cur % base);
            //asm("divl %%ecx" : "=a"(carry), "=d"(a[i]) : "A"(cur), "c"(base));
        }
        trim();
    }

    bigint operator*(int v) const {
        bigint res = *this;
        res *= v;
        return res;
    }

    friend pair<bigint, bigint> divmod(const bigint &a1, const bigint &b1) {
        int norm = base / (b1.a.back() + 1);
        bigint a = a1.abs() * norm;
        bigint b = b1.abs() * norm;
        bigint q, r;
        q.a.resize(a.a.size());

        for (int i = a.a.size() - 1; i >= 0; i--) {
            r *= base;
            r += a.a[i];
            int s1 = r.a.size() <= b.a.size() ? 0 : r.a[b.a.size()];
            int s2 = r.a.size() <= b.a.size() - 1 ? 0 : r.a[b.a.size() - 1];
            int d = ((long long) base * s1 + s2) / b.a.back();
            r -= b * d;
            while (r < 0)
                r += b, --d;
            q.a[i] = d;
        }

        q.sign = a1.sign * b1.sign;
        r.sign = a1.sign;
        q.trim();
        r.trim();
        return make_pair(q, r / norm);
    }

    bigint operator/(const bigint &v) const {
        return divmod(*this, v).first;
    }

    bigint operator%(const bigint &v) const {
        return divmod(*this, v).second;
    }

    void operator/=(int v) {
        if (v < 0)
            sign = -sign, v = -v;
        for (int i = (int) a.size() - 1, rem = 0; i >= 0; --i) {
            long long cur = a[i] + rem * (long long) base;
            a[i] = (int) (cur / v);
            rem = (int) (cur % v);
        }
        trim();
    }

    bigint operator/(int v) const {
        bigint res = *this;
        res /= v;
        return res;
    }

    int operator%(int v) const {
        if (v < 0)
            v = -v;
        int m = 0;
        for (int i = a.size() - 1; i >= 0; --i)
            m = (a[i] + m * (long long) base) % v;
        return m * sign;
    }

    void operator+=(const bigint &v) {
        *this = *this + v;
    }
    void operator-=(const bigint &v) {
        *this = *this - v;
    }
    void operator*=(const bigint &v) {
        *this = *this * v;
    }
    void operator/=(const bigint &v) {
        *this = *this / v;
    }

    bool operator<(const bigint &v) const {
        if (sign != v.sign)
            return sign < v.sign;
        if (a.size() != v.a.size())
            return a.size() * sign < v.a.size() * v.sign;
        for (int i = a.size() - 1; i >= 0; i--)
            if (a[i] != v.a[i])
                return a[i] * sign < v.a[i] * sign;
        return false;
    }

    bool operator>(const bigint &v) const {
        return v < *this;
    }
    bool operator<=(const bigint &v) const {
        return !(v < *this);
    }
    bool operator>=(const bigint &v) const {
        return !(*this < v);
    }
    bool operator==(const bigint &v) const {
        return !(*this < v) && !(v < *this);
    }
    bool operator!=(const bigint &v) const {
        return *this < v || v < *this;
    }

    void trim() {
        while (!a.empty() && !a.back())
            a.pop_back();
        if (a.empty())
            sign = 1;
    }

    bool isZero() const {
        return a.empty() || (a.size() == 1 && !a[0]);
    }

    bigint operator-() const {
        bigint res = *this;
        res.sign = -sign;
        return res;
    }

    bigint abs() const {
        bigint res = *this;
        res.sign *= res.sign;
        return res;
    }

    long long longValue() const {
        long long res = 0;
        for (int i = a.size() - 1; i >= 0; i--)
            res = res * base + a[i];
        return res * sign;
    }

    friend bigint gcd(const bigint &a, const bigint &b) {
        return b.isZero() ? a : gcd(b, a % b);
    }
    friend bigint lcm(const bigint &a, const bigint &b) {
        return a / gcd(a, b) * b;
    }

    void read(const string &s) {
        sign = 1;
        a.clear();
        int pos = 0;
        while (pos < (int) s.size() && (s[pos] == '-' || s[pos] == '+')) {
            if (s[pos] == '-')
                sign = -sign;
            ++pos;
        }
        for (int i = s.size() - 1; i >= pos; i -= base_digits) {
            int x = 0;
            for (int j = max(pos, i - base_digits + 1); j <= i; j++)
                x = x * 10 + s[j] - '0';
            a.push_back(x);
        }
        trim();
    }

    int length(){
        int l=0,back=a.back();
        while(back){l++;back/=10;}
        l+=((a.size()-1)*base_digits);
        return l;
    }

    friend istream& operator>>(istream &stream, bigint &v) {
        string s;
        stream >> s;
        v.read(s);
        return stream;
    }

    friend ostream& operator<<(ostream &stream, const bigint &v) {
        if (v.sign == -1)
            stream << '-';
        stream << (v.a.empty() ? 0 : v.a.back());
        for (int i = (int) v.a.size() - 2; i >= 0; --i)
            stream << setw(base_digits) << setfill('0') << v.a[i];
        return stream;
    }

    static vector<int> convert_base(const vector<int> &a, int old_digits, int new_digits) {
        vector<long long> p(max(old_digits, new_digits) + 1);
        p[0] = 1;
        for (int i = 1; i < (int) p.size(); i++)
            p[i] = p[i - 1] * 10;
        vector<int> res;
        long long cur = 0;
        int cur_digits = 0;
        for (int i = 0; i < (int) a.size(); i++) {
            cur += a[i] * p[cur_digits];
            cur_digits += old_digits;
            while (cur_digits >= new_digits) {
                res.push_back(int(cur % p[new_digits]));
                cur /= p[new_digits];
                cur_digits -= new_digits;
            }
        }
        res.push_back((int) cur);
        while (!res.empty() && !res.back())
            res.pop_back();
        return res;
    }

    typedef vector<long long> vll;

    static vll karatsubaMultiply(const vll &a, const vll &b) {
        int n = a.size();
        vll res(n + n);
        if (n <= 32) {
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++)
                    res[i + j] += a[i] * b[j];
            return res;
        }

        int k = n >> 1;
        vll a1(a.begin(), a.begin() + k);
        vll a2(a.begin() + k, a.end());
        vll b1(b.begin(), b.begin() + k);
        vll b2(b.begin() + k, b.end());

        vll a1b1 = karatsubaMultiply(a1, b1);
        vll a2b2 = karatsubaMultiply(a2, b2);

        for (int i = 0; i < k; i++)
            a2[i] += a1[i];
        for (int i = 0; i < k; i++)
            b2[i] += b1[i];

        vll r = karatsubaMultiply(a2, b2);
        for (int i = 0; i < (int) a1b1.size(); i++)
            r[i] -= a1b1[i];
        for (int i = 0; i < (int) a2b2.size(); i++)
            r[i] -= a2b2[i];

        for (int i = 0; i < (int) r.size(); i++)
            res[i + k] += r[i];
        for (int i = 0; i < (int) a1b1.size(); i++)
            res[i] += a1b1[i];
        for (int i = 0; i < (int) a2b2.size(); i++)
            res[i + n] += a2b2[i];
        return res;
    }

    bigint operator*(const bigint &v) const {
        vector<int> a6 = convert_base(this->a, base_digits, 6);
        vector<int> b6 = convert_base(v.a, base_digits, 6);
        vll a(a6.begin(), a6.end());
        vll b(b6.begin(), b6.end());
        while (a.size() < b.size())
            a.push_back(0);
        while (b.size() < a.size())
            b.push_back(0);
        while (a.size() & (a.size() - 1))
            a.push_back(0), b.push_back(0);
        vll c = karatsubaMultiply(a, b);
        bigint res;
        res.sign = sign * v.sign;
        for (int i = 0, carry = 0; i < (int) c.size(); i++) {
            long long cur = c[i] + carry;
            res.a.push_back((int) (cur % 1000000));
            carry = (int) (cur / 1000000);
        }
        res.a = convert_base(res.a, 6, base_digits);
        res.trim();
        return res;
    }
};
endsnippet
